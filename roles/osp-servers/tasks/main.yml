---
# tasks file for osp.servers
- name: Create newe frontend server instance and attaches them a network and passes metadata to the instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.frontend.name }}"
    state: "{{ osp_servers.frontend.state }}"
    image: "{{ osp_servers.frontend.image }}"
    meta: "group={{osp_servers.frontend.meta[0].group}},deployment_name={{osp_servers.frontend.meta[0].deployment_name}}"
    flavor: "{{ osp_servers.frontend.flavor }}"
    security_groups: "{{ osp_servers.frontend.security_group }}"
    key_name: "{{ osp_servers.frontend.key_name }}"
    wait: yes
    nics:
      - net-name: int_network
    user_data: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub >> /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo

- name: Create new app1 server instance and attaches them a network and passes metadata to the instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.app1.name }}"
    state: "{{ osp_servers.app1.state }}"
    image: "{{ osp_servers.app1.image }}"
    meta: "group={{osp_servers.app1.meta[0].group}},deployment_name={{osp_servers.app1.meta[0].deployment_name}}"
    flavor: "{{ osp_servers.app1.flavor }}"
    security_groups: "{{ osp_servers.app1.security_group }}"
    key_name: "{{ osp_servers.app1.key_name }}"
    wait: yes
    nics:
      - net-name: int_network
    user_data: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub >> /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo

- name: Create new app2 server instance and attaches them a network and passes metadata to the instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.app2.name }}"
    state: "{{ osp_servers.app2.state }}"
    image: "{{ osp_servers.app2.image }}"
    meta: "group={{osp_servers.app2.meta[0].group}},deployment_name={{osp_servers.app2.meta[0].deployment_name}}"
    flavor: "{{ osp_servers.app2.flavor }}"
    security_groups: "{{ osp_servers.app2.security_group }}"
    key_name: "{{ osp_servers.app2.key_name }}"
    wait: yes
    nics:
      - net-name: int_network
    user_data: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub >> /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo

- name: Create new db server instance and attaches them a network and passes metadata to the instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.db.name }}"
    state: "{{ osp_servers.db.state }}"
    image: "{{ osp_servers.db.image }}"
    meta: "group={{osp_servers.db.meta[0].group}},deployment_name={{osp_servers.db.meta[0].deployment_name}}"
    flavor: "{{ osp_servers.db.flavor }}"
    security_groups: "{{ osp_servers.db.security_group }}"
    key_name: "{{ osp_servers.db.key_name }}"
    wait: yes
    nics:
      - net-name: int_network
    user_data: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub >> /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo

- name: Add floating IP to frontend server instance
  os_floating_ip:
    cloud: ospcloud
    state: present
    reuse: yes
    server: "{{ osp_servers.frontend.name }}"
    network: ext_network
    wait: yes
    timeout: 180
  register: frontend_instancefloatingip

- name: Add floating IP to app1 server instance
  os_floating_ip:
    cloud: ospcloud
    state: present
    reuse: yes
    server: "{{ osp_servers.app1.name }}"
    network: ext_network
    wait: yes
    timeout: 180
  register: app1_instancefloatingip
   
- name: Add floating IP to app2 server instance
  os_floating_ip:
    cloud: ospcloud
    state: present
    reuse: yes
    server: "{{ osp_servers.app2.name }}"
    network: ext_network
    wait: yes
    timeout: 180
  register: app2_instancefloatingip

- name: Add floating IP to db server instance
  os_floating_ip:
    cloud: ospcloud
    state: present
    reuse: yes
    server: "{{ osp_servers.db.name }}"
    network: ext_network
    wait: yes
    timeout: 180
  register: db_instancefloatingip

- name: Wait for frontend server to be available
  wait_for:
    host: "{{ frontend_instancefloatingip.floating_ip.floating_ip_address }}"
    port: 22
    search_regex: OpenSSH
    timeout: 600
  delegate_to: "{{ inventory_hostname }}"

- name: Wait for app1 server to be available
  wait_for:
    host: "{{ app1_instancefloatingip.floating_ip.floating_ip_address }}"
    port: 22
    search_regex: OpenSSH
    timeout: 600
  delegate_to: "{{ inventory_hostname }}"

- name: Wait for app2 server to be available
  wait_for:
    host: "{{ app2_instancefloatingip.floating_ip.floating_ip_address }}"
    port: 22
    search_regex: OpenSSH
    timeout: 600
  delegate_to: "{{ inventory_hostname }}"

- name: Wait for db server to be available
  wait_for:
    host: "{{ db_instancefloatingip.floating_ip.floating_ip_address }}"
    port: 22
    search_regex: OpenSSH
    timeout: 600
  delegate_to: "{{ inventory_hostname }}"
